<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>收藏的文章</title>
    <link href="/2024/06/28/%E6%94%B6%E8%97%8F%E7%9A%84%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/"/>
    <url>/2024/06/28/%E6%94%B6%E8%97%8F%E7%9A%84%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="收藏的文章链接"><a href="#收藏的文章链接" class="headerlink" title="收藏的文章链接"></a>收藏的文章链接</h1><p>1、<a href="https://juejin.cn/post/7225511164120891453">【Android性能优化】：ProGuard，混淆，R8优化 - 掘金</a></p><p>2、<a href="https://juejin.cn/post/7215509220750098488">写给 Android 开发者的系统基础知识科普</a></p><p>3、<a href="https://juejin.cn/post/6844903976240939021">是让人耳目一新的 Jetpack MVVM 精讲</a></p><p>4、<a href="https://juejin.cn/post/7021727244124962846">如何向开源项目提交pr，完成人生中第一次代码贡献</a></p><p>5、<a href="https://blog.csdn.net/lordwish/article/details/85007867">WPF随笔–使用路径动画模拟管道流体流向</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.cs文件获取不到.xaml页面中的控件name问题</title>
    <link href="/2024/06/27/visual%20studio%20.cs%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0.xaml%E9%A1%B5%E9%9D%A2%E4%B8%AD%E7%9A%84%E6%8E%A7%E4%BB%B6name%E9%97%AE%E9%A2%98/"/>
    <url>/2024/06/27/visual%20studio%20.cs%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0.xaml%E9%A1%B5%E9%9D%A2%E4%B8%AD%E7%9A%84%E6%8E%A7%E4%BB%B6name%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="cs文件获取不到-xaml页面中的控件name问题"><a href="#cs文件获取不到-xaml页面中的控件name问题" class="headerlink" title=".cs文件获取不到.xaml页面中的控件name问题"></a>.cs文件获取不到.xaml页面中的控件name问题</h1><p>重启软件或重新生成解决方案都无法解决，最终删除项目中的.vs和obj文件夹，然后重启软件；</p>]]></content>
    
    
    
    <tags>
      
      <tag>wpf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio 运行项目无法弹出页面问题</title>
    <link href="/2024/06/26/visual%20studio%20%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%97%A0%E6%B3%95%E5%BC%B9%E5%87%BA%E9%A1%B5%E9%9D%A2%E9%97%AE%E9%A2%98/"/>
    <url>/2024/06/26/visual%20studio%20%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%97%A0%E6%B3%95%E5%BC%B9%E5%87%BA%E9%A1%B5%E9%9D%A2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Visual-Studio-运行项目无法弹出页面问题"><a href="#Visual-Studio-运行项目无法弹出页面问题" class="headerlink" title="Visual Studio 运行项目无法弹出页面问题"></a>Visual Studio 运行项目无法弹出页面问题</h1><p>在完成项目编码后，准备运行看看页面，但是总是无法弹窗，日志中也没有报错，在app中修改主页面为其他页面时可以正常运行，因此判断为程序有bug；开始排查：</p><p>​发现在.xaml页面中写了一个TabControl，此时给他设定被选择的标签是0，他会触发SelectionChanged中的方法，在该方法中，当标签发生变化时，会触发Frame.Content方法进行切换页面，而Frame还未被初始化，导致程序bug无法加载页面；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xaml">&lt;hc:TabControl<br>    Name=&quot;tc_item&quot;<br>    Grid.Row=&quot;0&quot;<br>    SelectedIndex=&quot;0&quot;<br>    SelectionChanged=&quot;Page_Changed&quot;<br>    Style=&quot;&#123;StaticResource TabControlBaseStyle&#125;&quot;<br>    TabItemHeight=&quot;200&quot;<br>    TabItemWidth=&quot;200&quot;<br>    TabStripPlacement=&quot;Top&quot;&gt;<br>    &lt;hc:TabItem&gt;<br>        &lt;TabItem.Header&gt;<br>            &lt;DockPanel&gt;<br>                &lt;Image<br>                    Width=&quot;10&quot;<br>                    Height=&quot;10&quot;<br>                    Source=&quot;../png/dec.png&quot; /&gt;<br>                &lt;TextBlock Text=&quot;主页&quot; /&gt;<br>            &lt;/DockPanel&gt;<br>        &lt;/TabItem.Header&gt;<br>    &lt;/hc:TabItem&gt;<br>    &lt;hc:TabItem Header=&quot;选项卡2&quot; /&gt;<br>    &lt;hc:TabItem Header=&quot;选项卡3&quot; /&gt;<br>&lt;/hc:TabControl&gt;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Page_Changed</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, SelectionChangedEventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> index = tc_item.SelectedIndex;<br>    <span class="hljs-keyword">switch</span> (index)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            mFrame.Content = <span class="hljs-keyword">new</span> Page1();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            mFrame.Content = <span class="hljs-keyword">new</span> Page2();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>​若想设置初始选择标签index不为0，需在代码中初始化之后设置SelectedIndex&#x3D;其他即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>wpf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo命令合集</title>
    <link href="/2024/06/25/hexo%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/"/>
    <url>/2024/06/25/hexo%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Hexo博客常用的命令"><a href="#关于Hexo博客常用的命令" class="headerlink" title="关于Hexo博客常用的命令"></a>关于Hexo博客常用的命令</h1><p>1、清理缓存</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><p>2、重新生成文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><p>3、开启本地服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>4、上传GitHub</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo 总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/24/hello-world/"/>
    <url>/2024/06/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding:ActivityMainBinding<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> titleList = arrayListOf&lt;String&gt;(<span class="hljs-string">&quot;第一个&quot;</span>, <span class="hljs-string">&quot;第二个&quot;</span>, <span class="hljs-string">&quot;第三个&quot;</span>, <span class="hljs-string">&quot;第四个&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> fragmentList : MutableList&lt;Fragment&gt;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br><br>        binding = ActivityMainBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本地总结</title>
    <link href="/2018/09/07/kotlin/"/>
    <url>/2018/09/07/kotlin/</url>
    
    <content type="html"><![CDATA[<h1 id="dataBinding-的使用"><a href="#dataBinding-的使用" class="headerlink" title="dataBinding 的使用"></a>dataBinding 的使用</h1><p>项目中使用viewBinding代替findViewById() 方法，首先在app目录下的build.gradle中的android{}结构中添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">buildFeatures &#123;<br>       viewBinding <span class="hljs-literal">true</span><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="1、在Activity中的使用"><a href="#1、在Activity中的使用" class="headerlink" title="1、在Activity中的使用"></a>1、在Activity中的使用</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding:ActivityMainBinding<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> titleList = arrayListOf&lt;String&gt;(<span class="hljs-string">&quot;第一个&quot;</span>, <span class="hljs-string">&quot;第二个&quot;</span>, <span class="hljs-string">&quot;第三个&quot;</span>, <span class="hljs-string">&quot;第四个&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> fragmentList : MutableList&lt;Fragment&gt;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br><br>        binding = ActivityMainBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、在Fragment中的使用"><a href="#2、在Fragment中的使用" class="headerlink" title="2、在Fragment中的使用"></a>2、在Fragment中的使用</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFragment</span> : <span class="hljs-type">Fragment</span>() &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding: FragmentTestBinding<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        arguments?.let &#123;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreateView</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        inflater: <span class="hljs-type">LayoutInflater</span>, container: <span class="hljs-type">ViewGroup</span>?,</span></span><br><span class="hljs-params"><span class="hljs-function">        savedInstanceState: <span class="hljs-type">Bundle</span>?</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>: View? &#123;<br>        binding = FragmentTestBinding.inflate(inflater,container,<span class="hljs-literal">false</span>)<br>        <span class="hljs-keyword">return</span> binding.root<br>    &#125;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-meta">@JvmStatic</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">newInstance</span><span class="hljs-params">()</span></span> =<br>            TestFragment().apply &#123;<br>                arguments = Bundle().apply &#123;<br><br>                &#125;<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Android-中控件的使用"><a href="#Android-中控件的使用" class="headerlink" title="Android 中控件的使用"></a>Android 中控件的使用</h1><h2 id="一、TabLayout-ViewPager2的快速上手使用"><a href="#一、TabLayout-ViewPager2的快速上手使用" class="headerlink" title="一、TabLayout + ViewPager2的快速上手使用"></a>一、TabLayout + ViewPager2的快速上手使用</h2><p>首先在app目录下的build.gradle中添加依赖，若是最新的Android项目可不用添加ViewPager2的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">implementation <span class="hljs-string">&#x27;com.google.android.material:material:1.1.0-beta01&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.LinearLayoutCompat</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.tabs.TabLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tl_title&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager2.widget.ViewPager2</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/vp2_content&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.appcompat.widget.LinearLayoutCompat</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding:ActivityMainBinding<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> titleList = arrayListOf&lt;String&gt;(<span class="hljs-string">&quot;第一个&quot;</span>, <span class="hljs-string">&quot;第二个&quot;</span>, <span class="hljs-string">&quot;第三个&quot;</span>, <span class="hljs-string">&quot;第四个&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> fragmentList : MutableList&lt;Fragment&gt;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br><br>        binding = ActivityMainBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br>        initView()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initView</span><span class="hljs-params">()</span></span> &#123;<br>        fragmentList = ArrayList&lt;Fragment&gt;()<br>        fragmentList.add(TestFragment.newInstance())<br>        fragmentList.add(TestFragment.newInstance())<br>        fragmentList.add(TestFragment.newInstance())<br>        fragmentList.add(TestFragment.newInstance())<br>        <span class="hljs-keyword">val</span> fragmentAdapter = FragmentAdapter(<span class="hljs-keyword">this</span>)<br>        binding.vp2Content.adapter = fragmentAdapter<br>        TabLayoutMediator(binding.tlTitle, binding.vp2Content) &#123;tab, position -&gt;<br>            tab.text = titleList[position]<br>        &#125;.attach()<br>        binding.vp2Content.registerOnPageChangeCallback(<span class="hljs-keyword">object</span>:ViewPager2.OnPageChangeCallback()&#123;<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPageSelected</span><span class="hljs-params">(position: <span class="hljs-type">Int</span>)</span></span> &#123;<br>                <span class="hljs-keyword">super</span>.onPageSelected(position)<br>            &#125;<br>        &#125;)<br><br>    &#125;<br>    <span class="hljs-comment">//父容器是Fragment则修改为传参Fragment  因为我用的父容器是Activity，所以传入FragmentActivity</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FragmentAdapter</span>(fa:FragmentActivity) : FragmentStateAdapter(fa) &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> = fragmentList.size<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createFragment</span><span class="hljs-params">(position: <span class="hljs-type">Int</span>)</span></span>: Fragment = fragmentList[position]<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ViewPager2的嵌套冲突问题解决方案"><a href="#ViewPager2的嵌套冲突问题解决方案" class="headerlink" title="ViewPager2的嵌套冲突问题解决方案"></a>ViewPager2的嵌套冲突问题解决方案</h3><p>在ViewPager2中再使用一层ViewPager2，会出现滑动冲突问题，具体表现为只能滑动最外层的ViewPager2，里面的只能通过点击来切换页面，具体是编写一个类，使用这个类去包裹第二层的ViewPager，设置高度为wrap_content，即可解决该问题。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewPager2Container</span> <span class="hljs-meta">@JvmOverloads</span> <span class="hljs-keyword">constructor</span>(context: Context, attrs: AttributeSet? = <span class="hljs-literal">null</span>, defStyleAttr: <span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span>) : RelativeLayout(context, attrs, defStyleAttr) &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mViewPager2: ViewPager2? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> disallowParentInterceptDownEvent = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> startX = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> startY = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">//遍历ViewPager2Container 的所有子 View，如果没有找到 ViewPager2 就抛出异常</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onFinishInflate</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onFinishInflate()<br>        <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until childCount) &#123;<br>            <span class="hljs-keyword">val</span> childView = getChildAt(i)<br>            <span class="hljs-keyword">if</span> (childView <span class="hljs-keyword">is</span> ViewPager2) &#123;<br>                mViewPager2 = childView<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (mViewPager2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> IllegalStateException(<span class="hljs-string">&quot;The root child of ViewPager2Container must contains a ViewPager2&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onInterceptTouchEvent</span><span class="hljs-params">(ev: <span class="hljs-type">MotionEvent</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">val</span> doNotNeedIntercept = (!mViewPager2!!.isUserInputEnabled<br>                || (mViewPager2?.adapter != <span class="hljs-literal">null</span><br>                &amp;&amp; mViewPager2?.adapter!!.itemCount &lt;= <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> (doNotNeedIntercept) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onInterceptTouchEvent(ev)<br>        &#125;<br>        <span class="hljs-keyword">when</span> (ev.action) &#123;<br>            MotionEvent.ACTION_DOWN -&gt; &#123;<br>                startX = ev.x.toInt()<br>                startY = ev.y.toInt()<br>                parent.requestDisallowInterceptTouchEvent(!disallowParentInterceptDownEvent)<br>            &#125;<br>            MotionEvent.ACTION_MOVE -&gt; &#123;<br>                <span class="hljs-keyword">val</span> endX = ev.x.toInt()<br>                <span class="hljs-keyword">val</span> endY = ev.y.toInt()<br>                <span class="hljs-keyword">val</span> disX = abs(endX - startX)<br>                <span class="hljs-keyword">val</span> disY = abs(endY - startY)<br>                <span class="hljs-keyword">if</span> (mViewPager2!!.orientation == ViewPager2.ORIENTATION_VERTICAL) &#123;<br>                    onVerticalActionMove(endY, disX, disY)<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mViewPager2!!.orientation == ViewPager2.ORIENTATION_HORIZONTAL) &#123;<br>                    onHorizontalActionMove(endX, disX, disY)<br>                &#125;<br>            &#125;<br>            MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -&gt; parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">false</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onInterceptTouchEvent(ev)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onHorizontalActionMove</span><span class="hljs-params">(endX: <span class="hljs-type">Int</span>, disX: <span class="hljs-type">Int</span>, disY: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (mViewPager2?.adapter == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (disX &gt; disY) &#123;<br>            <span class="hljs-keyword">val</span> currentItem = mViewPager2?.currentItem<br>            <span class="hljs-keyword">val</span> itemCount = mViewPager2?.adapter!!.itemCount<br>            <span class="hljs-keyword">if</span> (currentItem == <span class="hljs-number">0</span> &amp;&amp; endX - startX &gt; <span class="hljs-number">0</span>) &#123;<br>                parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">false</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.requestDisallowInterceptTouchEvent(currentItem != itemCount - <span class="hljs-number">1</span><br>                        || endX - startX &gt;= <span class="hljs-number">0</span>)<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (disY &gt; disX) &#123;<br>            parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">false</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onVerticalActionMove</span><span class="hljs-params">(endY: <span class="hljs-type">Int</span>, disX: <span class="hljs-type">Int</span>, disY: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (mViewPager2?.adapter == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">val</span> currentItem = mViewPager2?.currentItem<br>        <span class="hljs-keyword">val</span> itemCount = mViewPager2?.adapter!!.itemCount<br>        <span class="hljs-keyword">if</span> (disY &gt; disX) &#123;<br>            <span class="hljs-keyword">if</span> (currentItem == <span class="hljs-number">0</span> &amp;&amp; endY - startY &gt; <span class="hljs-number">0</span>) &#123;<br>                parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">false</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.requestDisallowInterceptTouchEvent(currentItem != itemCount - <span class="hljs-number">1</span><br>                        || endY - startY &gt;= <span class="hljs-number">0</span>)<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (disX &gt; disY) &#123;<br>            parent.requestDisallowInterceptTouchEvent(<span class="hljs-literal">false</span>)<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、Switch的使用"><a href="#二、Switch的使用" class="headerlink" title="二、Switch的使用"></a>二、Switch的使用</h2><p>使用Switch中，使用setChecked可以设置开关，但会触发他的开关监听，可能会出现逻辑混乱，通过下面方法可以设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCheckedChanged</span><span class="hljs-params">(CompoundButton buttonView, <span class="hljs-type">boolean</span> isChecked)</span> &#123;<br>        <span class="hljs-comment">//可以判断是被点击触发的还是软件代码设置触发的</span><br>        <span class="hljs-keyword">if</span> (!buttonView.isPressed()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        doSomething();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Android开发遇到的问题"><a href="#Android开发遇到的问题" class="headerlink" title="Android开发遇到的问题"></a>Android开发遇到的问题</h1><h2 id="1、Circular-dependency-between-the-following-tasks"><a href="#1、Circular-dependency-between-the-following-tasks" class="headerlink" title="1、Circular dependency between the following tasks"></a>1、Circular dependency between the following tasks</h2><p>由于项目中app中又导入了app的model，导致的冲突</p><p>在file -&gt; project Structure -&gt; Dependences中删除多余的即可  具体参考博客</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">https:<span class="hljs-comment">//blog.csdn.net/ruiruiddd/article/details/116484194</span><br></code></pre></td></tr></table></figure><h2 id="2、java-net-UnknownServiceException-CLEARTEXT…-解决办法"><a href="#2、java-net-UnknownServiceException-CLEARTEXT…-解决办法" class="headerlink" title="2、java.net.UnknownServiceException: CLEARTEXT… 解决办法"></a>2、java.net.UnknownServiceException: CLEARTEXT… 解决办法</h2><p>在使用OkHttp进行网络请求时，一直显示请求失败，查看原因时报错这个异常</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>为保证用户数据和设备的安全，Google针对下一代 Android 系统(Android P) 的应用程序，将要求默认使用加密连接，这意味着 Android P 将禁止 App 使用所有未加密的连接，因此运行 Android P 系统的安卓设备无论是接收或者发送流量，未来都不能明码传输，需要使用下一代(Transport Layer Security)传输层安全协议，而 Android Nougat 和 Oreo 则不受影响。<br>        在Android P系统的设备上，如果应用使用的是非加密的明文流量的http网络请求，则会导致该应用无法进行网络请求，https则不会受影响，同样地，如果应用嵌套了webview，webview也只能使用https请求。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>（1）APP改用https请求</strong></p><p><strong>（2）targetSdkVersion 降到27以下</strong></p><p><strong>（3）在 application 元素中添加：</strong></p><blockquote><p>android:usesCleartextTraffic&#x3D;”true” </p></blockquote><h2 id="3、Cause-connect-timed-out-问题"><a href="#3、Cause-connect-timed-out-问题" class="headerlink" title="3、Cause: connect timed out 问题"></a>3、Cause: connect timed out 问题</h2><p>目前一共碰到过两次这个问题，都是在项目启动同步时出现的</p><p>（1）新电脑刚安装as，创建新项目后一直无法同步成功，发现是在安装过程中没有安装sdk，导致找不到sdk位置和文件，重新安装后便可同步成功了；</p><p>（2）在网上拉取了一个旧项目，同步时出现该问题，主要是因为gradle版本不一致导致的，电脑上版本是7.5，项目是6.1.1；我首先将版本改成了我电脑上的版本，发现报错更多了，且没法解决，只能再将版本改回去，然后去网站上下载了一个6.1.1版本的gradle压缩包，将它放在我.gradle文件夹下相应文件中，再次同步就成功了；网址以及文件位置如下图：</p><p><a href="http://services.gradle.org/distributions">http://services.gradle.org/distributions</a></p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20240120112140616.png" alt="image-20240120112140616"></p><h2 id="4、Resources-NotFoundException"><a href="#4、Resources-NotFoundException" class="headerlink" title="4、Resources$NotFoundException"></a>4、Resources$NotFoundException</h2><p>显示全为 ： android.content.res.Resources$NotFoundException: String resource ID #0x1</p><p>其实就是setText() 方法中是应该传入string类型的数据，自己传入了int类型的</p><h1 id="JAVA代码实现CRC-16-MODBUS算法"><a href="#JAVA代码实现CRC-16-MODBUS算法" class="headerlink" title="JAVA代码实现CRC-16&#x2F;MODBUS算法"></a>JAVA代码实现CRC-16&#x2F;MODBUS算法</h1><p>结果与 <a href="http://www.ip33.com/crc.html">http://www.ip33.com/crc.html</a> 进行结果验证</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/yanwu12138/article/details/<span class="hljs-number">100976001</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6650</span>.<span class="hljs-number">3</span>&amp;utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">3</span>-<span class="hljs-number">100976001</span>-blog-<span class="hljs-number">88894390</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_anti_vip_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">3</span>-<span class="hljs-number">100976001</span>-blog-<span class="hljs-number">88894390</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_anti_vip_base&amp;utm_relevant_index=<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h1 id="kotlin中BaseActivity-和-BaseFragment的编写和使用"><a href="#kotlin中BaseActivity-和-BaseFragment的编写和使用" class="headerlink" title="kotlin中BaseActivity 和 BaseFragment的编写和使用"></a>kotlin中BaseActivity 和 BaseFragment的编写和使用</h1><h2 id="1、BaseActivity"><a href="#1、BaseActivity" class="headerlink" title="1、BaseActivity"></a>1、BaseActivity</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseActivity</span>&lt;<span class="hljs-type">VB : ViewBinding</span>&gt; : <span class="hljs-type">AppCompatActivity</span>()&#123;<br><br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding: VB<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        <span class="hljs-comment">//利用反射，调用指定ViewBinding中的inflate方法填充视图</span><br>        <span class="hljs-keyword">val</span> type = javaClass.genericSuper<span class="hljs-keyword">class</span><br>        <span class="hljs-title class_">if</span> (type <span class="hljs-keyword">is</span> ParameterizedType) &#123;<br>            <span class="hljs-keyword">val</span> clazz =type.actualTypeArguments[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> Class&lt;VB&gt;<br>            <span class="hljs-keyword">val</span> method= clazz.getMethod(<span class="hljs-string">&quot;inflate&quot;</span>, LayoutInflater::<span class="hljs-keyword">class</span>.java)<br>            binding = method.invoke(<span class="hljs-literal">null</span>, layoutInflater) <span class="hljs-keyword">as</span> VB<br>            setContentView(binding.root)<br>        &#125;<br>        initView()<br>    &#125;<br><br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initView</span><span class="hljs-params">()</span></span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getContext</span><span class="hljs-params">()</span></span> : Context = BaseApplication.newInstance()<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、BaseFragment"><a href="#2、BaseFragment" class="headerlink" title="2、BaseFragment"></a>2、BaseFragment</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseFragment</span>&lt;<span class="hljs-type">VB : ViewBinding</span>&gt; : <span class="hljs-type">Fragment</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> _binding: VB? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">val</span> binding: VB <span class="hljs-keyword">get</span>() = _binding!!<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreateView</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        inflater: <span class="hljs-type">LayoutInflater</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        container: <span class="hljs-type">ViewGroup</span>?,</span></span><br><span class="hljs-params"><span class="hljs-function">        savedInstanceState: <span class="hljs-type">Bundle</span>?</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>: View? &#123;<br>        <span class="hljs-comment">//利用反射，调用指定ViewBinding中的inflate方法填充视图</span><br>        <span class="hljs-keyword">val</span> type = javaClass.genericSuper<span class="hljs-keyword">class</span><br>        <span class="hljs-title class_">val</span> <span class="hljs-title">clazz</span> = (type <span class="hljs-keyword">as</span> ParameterizedType).actualTypeArguments[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> Class&lt;VB&gt;<br>        <span class="hljs-keyword">val</span> method = clazz.getMethod(<br>            <span class="hljs-string">&quot;inflate&quot;</span>,<br>            LayoutInflater::<span class="hljs-keyword">class</span>.java,<br>            ViewGroup::<span class="hljs-keyword">class</span>.java,<br>            <span class="hljs-built_in">Boolean</span>::<span class="hljs-keyword">class</span>.java<br>        )<br>        _binding = method.invoke(<span class="hljs-literal">null</span>, layoutInflater, container, <span class="hljs-literal">false</span>) <span class="hljs-keyword">as</span> VB<br>        initView()<br>        <span class="hljs-keyword">return</span> _binding!!.root<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onViewCreated</span><span class="hljs-params">(view: <span class="hljs-type">View</span>, savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onViewCreated(view, savedInstanceState)<br><br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initView</span><span class="hljs-params">()</span></span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getBaseContext</span><span class="hljs-params">()</span></span> = BaseApplication.newInstance()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Android-中自动连接WiFi方法"><a href="#Android-中自动连接WiFi方法" class="headerlink" title="Android 中自动连接WiFi方法"></a>Android 中自动连接WiFi方法</h1><h1 id="Android-中获取当前应用顶层Activity-Context的方法"><a href="#Android-中获取当前应用顶层Activity-Context的方法" class="headerlink" title="Android 中获取当前应用顶层Activity Context的方法"></a>Android 中获取当前应用顶层Activity Context的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、 获取ActivityThread中保存的所有的ActivityRecord</span><br><span class="hljs-comment"> * 2 、从ActivityRecord中获取状态不是pause的Activity并返回，这个Activity就是当前处于活动状态的Activity</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Activity <span class="hljs-title function_">getTopActivityInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">activityThreadClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        activityThreadClass = Class.forName(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">activityThread</span> <span class="hljs-operator">=</span> activityThreadClass.getMethod(<span class="hljs-string">&quot;currentActivityThread&quot;</span>).invoke(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">activitiesField</span> <span class="hljs-operator">=</span> activityThreadClass.getDeclaredField(<span class="hljs-string">&quot;mActivities&quot;</span>);<br>        activitiesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">activities</span> <span class="hljs-operator">=</span> (Map) activitiesField.get(activityThread);<br>        <span class="hljs-keyword">for</span> (Object activityRecord : activities.values()) &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">activityRecordClass</span> <span class="hljs-operator">=</span> activityRecord.getClass();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">pausedField</span> <span class="hljs-operator">=</span> activityRecordClass.getDeclaredField(<span class="hljs-string">&quot;paused&quot;</span>);<br>            pausedField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">if</span> (!pausedField.getBoolean(activityRecord)) &#123;<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">activityField</span> <span class="hljs-operator">=</span> activityRecordClass.getDeclaredField(<span class="hljs-string">&quot;activity&quot;</span>);<br>                activityField.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> (Activity) activityField.get(activityRecord);<br>                <span class="hljs-keyword">return</span> activity;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Android-切换中英文功能的实现"><a href="#Android-切换中英文功能的实现" class="headerlink" title="Android 切换中英文功能的实现"></a>Android 切换中英文功能的实现</h1><p>一般是在BaseActivity中重写attachBaseContext方法，根据用户的选择或者系统的语言进行配置，重新配置方法中的Context变量，然后所有的Activity继承该BaseActivity，从而达到切换中英文的功能，具体代码如下。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">attachBaseContext</span><span class="hljs-params">(newBase: <span class="hljs-type">Context</span>?)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> initModel =<br>        tool.readConfig(tool.getFileRoot(getContext()), <span class="hljs-string">&quot;projectLanguage&quot;</span>, ProjectModel)<br>            .toInt()<br>    <span class="hljs-keyword">var</span> newLocal : Locale<br>    <span class="hljs-comment">//根据用户选择的语言进行判断和赋值</span><br>    <span class="hljs-keyword">if</span> (initModel == <span class="hljs-number">1</span>) &#123;<br>        newLocal = Locale.US<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        newLocal = Locale.CHINESE<br>    &#125;<br>    <span class="hljs-keyword">val</span> context = MyContextWrapper.wrap(newBase, newLocal)<br>    <span class="hljs-comment">//赋值新的context值，新的Activity会调用该Context</span><br>    <span class="hljs-keyword">super</span>.attachBaseContext(context)<br>&#125;<br></code></pre></td></tr></table></figure><p>MyContextWrapper工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyContextWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContextWrapper</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyContextWrapper</span><span class="hljs-params">(Context base)</span> &#123;<br>        <span class="hljs-built_in">super</span>(base);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ContextWrapper <span class="hljs-title function_">wrap</span><span class="hljs-params">(Context context, Locale newLocale)</span> &#123;<br>        <span class="hljs-type">Resources</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> context.getResources();<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> res.getConfiguration();<br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<br>            configuration.setLocale(newLocale);<br>            <span class="hljs-type">LocaleList</span> <span class="hljs-variable">localeList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocaleList</span>(newLocale);<br>            LocaleList.setDefault(localeList);<br>            configuration.setLocales(localeList);<br>            context = context.createConfigurationContext(configuration);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            configuration.setLocale(newLocale);<br>            context = context.createConfigurationContext(configuration);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextWrapper</span>(context);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Android-的USB接口监听，读取U盘文件功能实现"><a href="#Android-的USB接口监听，读取U盘文件功能实现" class="headerlink" title="Android 的USB接口监听，读取U盘文件功能实现"></a>Android 的USB接口监听，读取U盘文件功能实现</h1><h1 id="重启app的方式"><a href="#重启app的方式" class="headerlink" title="重启app的方式"></a>重启app的方式</h1><h2 id="1、杀死进程并重新启动的方式"><a href="#1、杀死进程并重新启动的方式" class="headerlink" title="1、杀死进程并重新启动的方式"></a>1、杀死进程并重新启动的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> getActivity().getPackageManager().getLaunchIntentForPackage(getActivity().getPackageName());<br>                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);<br>                        getActivity().startActivity(intent);<br>                        android.os.Process.killProcess(android.os.Process.myPid());<br></code></pre></td></tr></table></figure><p>此方式需注意不能设置启动页面为SingleTask模式，否则无法重启</p><h2 id="2、不杀死进程通过服务重启的方式"><a href="#2、不杀死进程通过服务重启的方式" class="headerlink" title="2、不杀死进程通过服务重启的方式"></a>2、不杀死进程通过服务重启的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**开启一个新的服务，用来重启本APP*/</span><br>       <span class="hljs-type">Intent</span> <span class="hljs-variable">intent1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(context, killSelfService.class);<br>       intent1.putExtra(<span class="hljs-string">&quot;PackageName&quot;</span>, context.getPackageName());<br>       intent1.putExtra(<span class="hljs-string">&quot;Delayed&quot;</span>, Delayed);<br>       context.startService(intent1);<br><br>       <span class="hljs-comment">//关闭所有Activity</span><br>       ActivityCollect.finishAll();<br></code></pre></td></tr></table></figure><p>需注意此方式无法杀死进程，所以许多静态变量不会重新赋值</p><h1 id="ADB-命令使用汇总"><a href="#ADB-命令使用汇总" class="headerlink" title="ADB 命令使用汇总"></a>ADB 命令使用汇总</h1><h2 id="1、通过adb控制设备安装或者卸载app"><a href="#1、通过adb控制设备安装或者卸载app" class="headerlink" title="1、通过adb控制设备安装或者卸载app"></a>1、通过adb控制设备安装或者卸载app</h2><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20231130110315196.png" alt="image-20231130110315196"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs adb">C:\Users\LENOVO&gt;adb devices<br>List of devices attached<br>HA1PMT5C        device<br><br>C:\Users\LENOVO&gt;adb install -r &quot;E:\android\git\AlvaA6\app\build\outputs\apk\debug&quot;<br>Performing Streamed Install<br>adb.exe: filename doesn&#x27;t end .apk or .apex: E:\android\git\AlvaA6\app\build\outputs\apk\debug<br><br>C:\Users\LENOVO&gt;adb install -r &quot;E:\android\git\AlvaA6\app\build\outputs\apk\debug\app-debug.apk&quot;<br>Performing Streamed Install<br>Success<br></code></pre></td></tr></table></figure><h1 id="AS-打jar包的方法"><a href="#AS-打jar包的方法" class="headerlink" title="AS 打jar包的方法"></a>AS 打jar包的方法</h1><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>1、在项目下新建一个module，在该模块下进行功能类的编写；</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20231211142218974.png" alt="image-20231211142218974"></p><p>2、在build.gradle文件下添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//Copy类型</span><br>    task <span class="hljs-title function_">makeJar</span><span class="hljs-params">(type: Copy)</span> &#123;<br>        <span class="hljs-comment">//删除存在的</span><br>        <span class="hljs-comment">//delete &#x27;build/libs/jarsdk.jar&#x27;</span><br> <br>        <span class="hljs-comment">//设置拷贝的文件</span><br>        <span class="hljs-comment">// from(&#x27;build/intermediates/bundles/release/&#x27;)</span><br>        from(<span class="hljs-string">&#x27;build/intermediates/aar_main_jar/release/&#x27;</span>)<br> <br>        <span class="hljs-comment">//打进jar包后的文件目录</span><br>        into(<span class="hljs-string">&#x27;build/libs/&#x27;</span>)<br>        <br>        <span class="hljs-comment">//将classes.jar放入build/libs/目录下</span><br>        <span class="hljs-comment">//include ,exclude参数来设置过滤</span><br>        <span class="hljs-comment">//（我们只关心classes.jar这个文件）</span><br>        include(<span class="hljs-string">&#x27;classes.jar&#x27;</span>)<br> <br>        <span class="hljs-comment">//重命名</span><br>        rename (<span class="hljs-string">&#x27;classes.jar&#x27;</span>, <span class="hljs-string">&#x27;myJar.jar&#x27;</span>)<br>    &#125;<br> <br>    makeJar.dependsOn(build)<br><span class="hljs-comment">//在终端执行生成JAR包</span><br><span class="hljs-comment">// gradlew makeJar</span><br></code></pre></td></tr></table></figure><p>3、在as 右侧选择Gradle </p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20231211142434470.png" alt="image-20231211142434470"></p><p>选择other，找到makeJar 选项，点击等待同步完毕，在build-&gt; libs 文件夹下，可以看到打包成功的jar包</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20231211142644254.png" alt="image-20231211142644254"></p><p>4、复制该jar包到app module 下进行测试，放到lib文件夹中，在build.gradle 文件中导入jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">implementation(fileTree(<span class="hljs-string">&quot;libs&quot;</span>))<br></code></pre></td></tr></table></figure><h2 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h2><p>若出现右侧找不到Gradle的选项，可到设置中进行修改，将该选项关闭即可</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20231211143058534.png" alt="image-20231211143058534"></p><h1 id="屏幕适配方案"><a href="#屏幕适配方案" class="headerlink" title="屏幕适配方案"></a>屏幕适配方案</h1><p>在相同尺寸的屏幕中，由于dpi的不同可能导致页面显示不一致，可通过开发者选项中的最小宽度修改解决，具体的解决方案还未找到</p><h2 id="一、今日头条的最终适配方案"><a href="#一、今日头条的最终适配方案" class="headerlink" title="一、今日头条的最终适配方案"></a>一、今日头条的最终适配方案</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">implementation &quot;me.jessyan:autosize:$&#123;Version.AutoSize&#125;&quot;  //1.2.1<br></code></pre></td></tr></table></figure><p>在清单文件中添加设计页面的高和宽</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;design_width_in_dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;360&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;design_height_in_dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;640&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、今日头条方案2"><a href="#二、今日头条方案2" class="headerlink" title="二、今日头条方案2"></a>二、今日头条方案2</h2><p>采用的是生成许多不同分辨率的文件夹，里面有对应的dp，运行后软件会根据当前手机的分辨率去对应的包下找对应的dp或sp</p><h2 id="三、字节跳动适配"><a href="#三、字节跳动适配" class="headerlink" title="三、字节跳动适配"></a>三、字节跳动适配</h2><p>与一的方案差不多</p><h1 id="提示弹窗Notification使用"><a href="#提示弹窗Notification使用" class="headerlink" title="提示弹窗Notification使用"></a>提示弹窗Notification使用</h1><p><a href="https://blog.csdn.net/yechaoa/article/details/125465158">https://blog.csdn.net/yechaoa/article/details/125465158</a></p><h1 id="Gradle统一管理"><a href="#Gradle统一管理" class="headerlink" title="Gradle统一管理"></a>Gradle统一管理</h1><p>新建一个module，命名为buildSrc，新建一个build.gradle.kts文件，内容如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">plugins &#123; `kotlin-dsl` &#125;<br><span class="hljs-keyword">repositories</span> &#123; mavenCentral() &#125;<br></code></pre></td></tr></table></figure><p>然后点击同步</p><p>创建DependencyConfig类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> DependencyConfig &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 依赖版本号</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Qu Yunshuo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 4/24/21 4:01 PM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> Version &#123;<br><br>        <span class="hljs-comment">// AndroidX--------------------------------------------------------------</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AppCompat = <span class="hljs-string">&quot;1.3.1&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> CoreKtx = <span class="hljs-string">&quot;1.7.0&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ConstraintLayout = <span class="hljs-string">&quot;2.1.3&quot;</span>                <span class="hljs-comment">// 约束布局</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TestExtJunit = <span class="hljs-string">&quot;1.1.2&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TestEspresso = <span class="hljs-string">&quot;3.4.0&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ActivityKtx = <span class="hljs-string">&quot;1.5.1&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> FragmentKtx = <span class="hljs-string">&quot;1.5.2&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> MultiDex = <span class="hljs-string">&quot;2.0.1&quot;</span><br><br>        <span class="hljs-comment">// Android---------------------------------------------------------------</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Junit = <span class="hljs-string">&quot;4.13&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Material = <span class="hljs-string">&quot;1.2.0&quot;</span>                        <span class="hljs-comment">// 材料设计UI套件</span><br><br>        <span class="hljs-comment">// Kotlin----------------------------------------------------------------</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Kotlin = <span class="hljs-string">&quot;1.6.21&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Coroutines = <span class="hljs-string">&quot;1.6.1&quot;</span>                      <span class="hljs-comment">// 协程</span><br><br>        <span class="hljs-comment">// JetPack---------------------------------------------------------------</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Lifecycle = <span class="hljs-string">&quot;2.4.1&quot;</span>                       <span class="hljs-comment">// Lifecycle</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Hilt = <span class="hljs-string">&quot;2.38.1&quot;</span>                             <span class="hljs-comment">// DI框架-Hilt</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Navigation = <span class="hljs-string">&quot;2.5.3&quot;</span>                             <span class="hljs-comment">//Navigation 框架</span><br><br>        <span class="hljs-comment">// GitHub----------------------------------------------------------------</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> OkHttp = <span class="hljs-string">&quot;4.9.0&quot;</span>                          <span class="hljs-comment">// OkHttp</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> OkHttpInterceptorLogging = <span class="hljs-string">&quot;4.9.1&quot;</span>        <span class="hljs-comment">// OkHttp 请求Log拦截器</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Retrofit = <span class="hljs-string">&quot;2.9.0&quot;</span>                        <span class="hljs-comment">// Retrofit</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> RetrofitConverterGson = <span class="hljs-string">&quot;2.9.0&quot;</span>           <span class="hljs-comment">// Retrofit Gson 转换器</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Gson = <span class="hljs-string">&quot;2.8.7&quot;</span>                            <span class="hljs-comment">// Gson</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> MMKV = <span class="hljs-string">&quot;1.2.9&quot;</span>                            <span class="hljs-comment">// 腾讯 MMKV 替代SP</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AutoSize = <span class="hljs-string">&quot;1.2.1&quot;</span>                        <span class="hljs-comment">// 屏幕适配</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ARoute = <span class="hljs-string">&quot;1.5.1&quot;</span>                          <span class="hljs-comment">// 阿里路由</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ARouteCompiler = <span class="hljs-string">&quot;1.5.1&quot;</span>                  <span class="hljs-comment">// 阿里路由 APT</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> RecyclerViewAdapter = <span class="hljs-string">&quot;3.0.4&quot;</span>             <span class="hljs-comment">// RecyclerViewAdapter</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> EventBus = <span class="hljs-string">&quot;3.2.0&quot;</span>                        <span class="hljs-comment">// 事件总线</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PermissionX = <span class="hljs-string">&quot;1.4.0&quot;</span>                     <span class="hljs-comment">// 权限申请</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> LeakCanary = <span class="hljs-string">&quot;2.7&quot;</span>                        <span class="hljs-comment">// 检测内存泄漏</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AutoService = <span class="hljs-string">&quot;1.0&quot;</span>                       <span class="hljs-comment">// 自动生成SPI暴露服务文件</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Coil = <span class="hljs-string">&quot;1.3.0&quot;</span>                            <span class="hljs-comment">// Kotlin图片加载框架</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> MVVMBase = <span class="hljs-string">&quot;1.2.7&quot;</span>                         <span class="hljs-comment">//MVVM base基类</span><br>        <span class="hljs-comment">//Gitee</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> VipBase = <span class="hljs-string">&quot;1.0.4&quot;</span>                         <span class="hljs-comment">//MVVM base基类</span><br><br><br>        <span class="hljs-comment">// 第三方SDK--------------------------------------------------------------</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TencentBugly = <span class="hljs-string">&quot;3.3.9&quot;</span>                    <span class="hljs-comment">// 腾讯Bugly 异常上报</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TencentBuglyNative = <span class="hljs-string">&quot;3.8.0&quot;</span>              <span class="hljs-comment">// Bugly native异常上报</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TencentTBSX5 = <span class="hljs-string">&quot;43939&quot;</span>                    <span class="hljs-comment">// 腾讯X5WebView</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * AndroidX相关依赖</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Qu Yunshuo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 4/24/21 4:01 PM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> AndroidX &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AndroidJUnitRunner = <span class="hljs-string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AppCompat = <span class="hljs-string">&quot;androidx.appcompat:appcompat:<span class="hljs-subst">$&#123;Version.AppCompat&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> CoreKtx = <span class="hljs-string">&quot;androidx.core:core-ktx:<span class="hljs-subst">$&#123;Version.CoreKtx&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ConstraintLayout =<br>            <span class="hljs-string">&quot;androidx.constraintlayout:constraintlayout:<span class="hljs-subst">$&#123;Version.ConstraintLayout&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TestExtJunit = <span class="hljs-string">&quot;androidx.test.ext:junit:<span class="hljs-subst">$&#123;Version.TestExtJunit&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TestEspresso = <span class="hljs-string">&quot;androidx.test.espresso:espresso-core:<span class="hljs-subst">$&#123;Version.TestEspresso&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ActivityKtx = <span class="hljs-string">&quot;androidx.activity:activity-ktx:<span class="hljs-subst">$&#123;Version.ActivityKtx&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> FragmentKtx = <span class="hljs-string">&quot;androidx.fragment:fragment-ktx:<span class="hljs-subst">$&#123;Version.FragmentKtx&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> MultiDex = <span class="hljs-string">&quot;androidx.multidex:multidex:<span class="hljs-subst">$&#123;Version.MultiDex&#125;</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Android相关依赖</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Qu Yunshuo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 4/24/21 4:02 PM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> Android &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Junit = <span class="hljs-string">&quot;junit:junit:<span class="hljs-subst">$&#123;Version.Junit&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Material = <span class="hljs-string">&quot;com.google.android.material:material:<span class="hljs-subst">$&#123;Version.Material&#125;</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * JetPack相关依赖</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Qu Yunshuo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 4/24/21 4:02 PM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> JetPack &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ViewModel = <span class="hljs-string">&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:<span class="hljs-subst">$&#123;Version.Lifecycle&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ViewModelSavedState =<br>            <span class="hljs-string">&quot;androidx.lifecycle:lifecycle-viewmodel-savedstate:<span class="hljs-subst">$&#123;Version.Lifecycle&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> LiveData = <span class="hljs-string">&quot;androidx.lifecycle:lifecycle-livedata-ktx:<span class="hljs-subst">$&#123;Version.Lifecycle&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Lifecycle = <span class="hljs-string">&quot;androidx.lifecycle:lifecycle-runtime-ktx:<span class="hljs-subst">$&#123;Version.Lifecycle&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> LifecycleCompilerAPT =<br>            <span class="hljs-string">&quot;androidx.lifecycle:lifecycle-compiler:<span class="hljs-subst">$&#123;Version.Lifecycle&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> HiltCore = <span class="hljs-string">&quot;com.google.dagger:hilt-android:<span class="hljs-subst">$&#123;Version.Hilt&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> HiltApt = <span class="hljs-string">&quot;com.google.dagger:hilt-compiler:<span class="hljs-subst">$&#123;Version.Hilt&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Navigation = <span class="hljs-string">&quot;androidx.navigation:navigation-ui-ktx:<span class="hljs-subst">$&#123;Version.Navigation&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> NavigationFragment = <span class="hljs-string">&quot;androidx.navigation:navigation-fragment-ktx:<span class="hljs-subst">$&#123;Version.Navigation&#125;</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Kotlin相关依赖</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Qu Yunshuo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 4/24/21 4:02 PM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> Kotlin &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Kotlin = <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:<span class="hljs-subst">$&#123;Version.Kotlin&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> CoroutinesCore =<br>            <span class="hljs-string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:<span class="hljs-subst">$&#123;Version.Coroutines&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> CoroutinesAndroid =<br>            <span class="hljs-string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:<span class="hljs-subst">$&#123;Version.Coroutines&#125;</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * GitHub及其他相关依赖</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Qu Yunshuo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 4/24/21 4:02 PM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> GitHub &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> OkHttp = <span class="hljs-string">&quot;com.squareup.okhttp3:okhttp:<span class="hljs-subst">$&#123;Version.OkHttp&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> OkHttpInterceptorLogging =<br>            <span class="hljs-string">&quot;com.squareup.okhttp3:logging-interceptor:<span class="hljs-subst">$&#123;Version.OkHttpInterceptorLogging&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Retrofit = <span class="hljs-string">&quot;com.squareup.retrofit2:retrofit:<span class="hljs-subst">$&#123;Version.Retrofit&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> RetrofitConverterGson =<br>            <span class="hljs-string">&quot;com.squareup.retrofit2:converter-gson:<span class="hljs-subst">$&#123;Version.RetrofitConverterGson&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Gson = <span class="hljs-string">&quot;com.google.code.gson:gson:<span class="hljs-subst">$&#123;Version.Gson&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> MMKV = <span class="hljs-string">&quot;com.tencent:mmkv-static:<span class="hljs-subst">$&#123;Version.MMKV&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AutoSize = <span class="hljs-string">&quot;me.jessyan:autosize:<span class="hljs-subst">$&#123;Version.AutoSize&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ARoute = <span class="hljs-string">&quot;com.alibaba:arouter-api:<span class="hljs-subst">$&#123;Version.ARoute&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ARouteCompiler = <span class="hljs-string">&quot;com.alibaba:arouter-compiler:<span class="hljs-subst">$&#123;Version.ARouteCompiler&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> RecyclerViewAdapter =<br>            <span class="hljs-string">&quot;com.github.CymChad:BaseRecyclerViewAdapterHelper:<span class="hljs-subst">$&#123;Version.RecyclerViewAdapter&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> EventBus = <span class="hljs-string">&quot;org.greenrobot:eventbus:<span class="hljs-subst">$&#123;Version.EventBus&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> EventBusAPT = <span class="hljs-string">&quot;org.greenrobot:eventbus-annotation-processor:<span class="hljs-subst">$&#123;Version.EventBus&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PermissionX = <span class="hljs-string">&quot;com.permissionx.guolindev:permissionx:<span class="hljs-subst">$&#123;Version.PermissionX&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> LeakCanary = <span class="hljs-string">&quot;com.squareup.leakcanary:leakcanary-android:<span class="hljs-subst">$&#123;Version.LeakCanary&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AutoService = <span class="hljs-string">&quot;com.google.auto.service:auto-service:<span class="hljs-subst">$&#123;Version.AutoService&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> AutoServiceAnnotations =<br>            <span class="hljs-string">&quot;com.google.auto.service:auto-service-annotations:<span class="hljs-subst">$&#123;Version.AutoService&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> Coil = <span class="hljs-string">&quot;io.coil-kt:coil:<span class="hljs-subst">$&#123;Version.Coil&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> CoilGIF = <span class="hljs-string">&quot;io.coil-kt:coil-gif:<span class="hljs-subst">$&#123;Version.Coil&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> CoilSVG = <span class="hljs-string">&quot;io.coil-kt:coil-svg:<span class="hljs-subst">$&#123;Version.Coil&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> CoilVideo = <span class="hljs-string">&quot;io.coil-kt:coil-video:<span class="hljs-subst">$&#123;Version.Coil&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> VipBase = <span class="hljs-string">&quot;com.vip:base:<span class="hljs-subst">$&#123;Version.VipBase&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> MVVMBase = <span class="hljs-string">&quot;com.github.hegaojian:JetpackMvvm:<span class="hljs-subst">$&#123;Version.MVVMBase&#125;</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SDK相关依赖</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> SDK &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TencentBugly = <span class="hljs-string">&quot;com.tencent.bugly:crashreport:<span class="hljs-subst">$&#123;Version.TencentBugly&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TencentBuglyNative =<br>            <span class="hljs-string">&quot;com.tencent.bugly:nativecrashreport:<span class="hljs-subst">$&#123;Version.TencentBuglyNative&#125;</span>&quot;</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TencentTBSX5 = <span class="hljs-string">&quot;com.tencent.tbs.tbssdk:sdk:<span class="hljs-subst">$&#123;Version.TencentTBSX5&#125;</span>&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建ProjectBuildConfig类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> ProjectBuildConfig &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> compileSdkVersion = <span class="hljs-number">33</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> applicationId = <span class="hljs-string">&quot;com.alva.expmac&quot;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> minSdkVersion = <span class="hljs-number">21</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> targetSdkVersion = <span class="hljs-number">33</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> versionCode = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> versionName = <span class="hljs-string">&quot;1.0&quot;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> isAppMode = <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 项目当前的版本状态</span><br><span class="hljs-comment">     * 该状态直接反映当前App是测试版 还是正式版 或者预览版</span><br><span class="hljs-comment">     * 正式版:RELEASE、预览版(α)-内部测试版:ALPHA、测试版(β)-公开测试版:BETA</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">object</span> Version &#123;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> RELEASE = <span class="hljs-string">&quot;VERSION_STATUS_RELEASE&quot;</span><br><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ALPHA = <span class="hljs-string">&quot;VERSION_STATUS_ALPHA&quot;</span><br><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> BETA = <span class="hljs-string">&quot;VERSION_STATUS_BETA&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在build.gradle中使用即可</p><p>导入</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> buildsrc.*<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android 总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
